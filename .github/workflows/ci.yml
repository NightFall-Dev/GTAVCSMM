name: Build

on:
  schedule:
    # cronjob that triggers every day at 6PM UTC
    - cron: '0 18 * * *'
  workflow_dispatch:

jobs:
  build:

    runs-on: windows-latest
    outputs:
      full_sha: ${{ steps.var.outputs.full_sha }}
      short_sha: ${{ steps.var.outputs.short_sha }}
    steps:
    - uses: actions/checkout@v3
      with:
          submodules: recursive
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2.1.0
      with:
        dotnet-version: 6.0.x
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Restore dependencies
      run: msbuild GTAVCSMM.sln /t:Restore /p:Configuration=Release
    - name: Build 64bit release DLL
      run: |
        msbuild /p:Configuration=Release /p:Platform=x64 GTAVCSMM.sln /warnaserror
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
       name: binary
       path: |
            bin/x64/Release/GTAVCSMM.exe
    - name: Generate Build Info
      id: var
      run: |
          echo "::set-output name=full_sha::$(git rev-parse HEAD)"
          echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

  check_detections:
    runs-on: ubuntu-latest
    name: Check for detections in Binary and notify if necesarry
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: binary

      - name: Test file for detected bits
        id: detections
        uses: Yimura/gtav-sigscan-action@v0.0.3
        with:
          file: ./GTAVCSMM.exe

  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    needs: build
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3

      - id: should_run
        continue-on-error: true
        name: Check if latest commit date is within the previous 24 hours
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"

  create_release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [ check_date, build ]
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: binary

      - name: Echo build sha256
        id: build_sha
        run: |
          sha256sum GTAVCSMM.exe > sha256.checksum
          echo "::set-output name=build_sha::$(cat sha256.checksum)"
          cat sha256.checksum

      - name: Remove previous Release
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release [${{ needs.build.outputs.short_sha }}]
          tag_name: nightly
          body: |
            **This release has been build by Github Actions**
            [Link to build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Build SHA256:
            ```
            ${{ steps.build_sha.outputs.build_sha }}
            ```
            To verify the build SHA256 during the action, click the build link, go-to "Create Release", open the Echo build sha256 step and read the sha256.

            Compare this build hash with one that you generated yourself from the build artifacts.
            Alternatively you can download the build artifacts, generate a SHA256 checksum and compare it with the below binary.
            Build artifacts ARE NOT automatically the same as release assets since release assets can be modified afterwards.

            These are nightly builds of GTAVCS, they are provided for testing purposes only:
            - Test if your build environment produces a broken GTAVCSMM.exe
            - Test if source code is out of date and no longer compatible with the current version of GTA V

            If you wish to use this menu as-is you are on your own, no warranty is provided.

            Full Commit Hash:
            ```
            ${{ needs.build.outputs.full_sha }}
            ```
          files: |
            GTAVCSMM.exe
